<?xml version="1.0" encoding="UTF-8"?>
<!--

 Author: Andreas Rumpf
 Copyright (C) 2012 Andreas Rumpf, Dominik Picheta

 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Library General Public
 License as published by the Free Software Foundation; either
 version 2 of the License, or (at your option) any later version.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Library General Public License for more details.

 You should have received a copy of the GNU Library General Public
 License along with this library; if not, write to the
 Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 Boston, MA 02111-1307, USA.

-->
<language id="nimrod" _name="Nimrod" version="2.0" _section="Sources">
  <metadata>
    <property name="mimetypes">text/x-nimrod</property>
    <property name="globs">*.nim;*.nimrod</property>
    <property name="line-comment-start">#</property>
  </metadata>

  <styles>
    <style id="module-handler"    _name="Module Handler"        map-to="def:preprocessor"/>
    <style id="keyword"           _name="Keyword"               map-to="def:keyword"/>
    <style id="multiline-string"  _name="Multiline string"      map-to="def:string"/>
    <style id="string"            _name="String"                map-to="def:string"/>
    <style id="escaped-char"      _name="Escaped Character"     map-to="def:special-char"/>
    <style id="format"            _name="Format"                map-to="def:character"/>
    <style id="string-conversion" _name="string-conversion"/>
    <style id="special-variable"  _name="Special Variable"      map-to="def:identifier"/>
    <style id="boolean"           _name="Boolean"               map-to="def:boolean"/>
    <style id="floating-point"    _name="Floating point number" map-to="def:floating-point"/>
    <style id="decimal"           _name="Decimal number"        map-to="def:decimal"/>
    <style id="base-n-integer"    _name="Base-N number"         map-to="def:base-n-integer"/>
    <style id="type"              _name="type"                  map-to="def:type"/>
    <style id="pragma"            _name="pragma"                map-to="nimrod:pragma"/>
  </styles>

  <definitions>
    <define-regex id="identifier">[_a-zA-Z][_a-zA-Z0-9]*</define-regex>
    <define-regex id="number">[0-9][0-9]*</define-regex>

    <context id="format" style-ref="format" extend-parent="false">
      <match extended="true">
        \$[^\$][A-Za-z_0-9]*
      </match>
    </context>

    <context id="escaped-char" style-ref="escaped-char" extend-parent="true">
      <match extended="true">
        \\(                 # leading backslash
        [\\'"NnRrCcLlFfEeAaBbVvTt] | # single escaped char
        x[0-9A-Fa-f]{1,2} | # \xhh - character with hex value hh
        [0-9]+              # \ooo - character with decimal value ooo
        )
      </match>
    </context>

    <define-regex id="string-prefix">(u|U)?</define-regex>
    <define-regex id="raw-string-prefix">(r|ur|R|UR|Ur|uR)</define-regex>

    <context id="multiline-double-quoted-string" style-ref="multiline-string">
      <start>\"\"\"</start>
      <end>\"\"\"</end>
      <include>
        <context ref="format"/>
      </include>
    </context>

    <context id="double-quoted-string" style-ref="string" end-at-line-end="true">
      <start>"</start>
      <end>"</end>
      <include>
        <context ref="format"/>
        <context ref="escaped-char"/>
      </include>
    </context>

    <context id="single-quoted-string" style-ref="string" end-at-line-end="true">
      <start>'</start>
      <end>'</end>
      <include>
        <context ref="format"/>
        <context ref="escaped-char"/>
      </include>
    </context>

    <context id="double-quoted-raw-string" style-ref="string" end-at-line-end="true">
      <start>[rR]"</start>
      <end>"</end>
      <include>
        <context ref="format"/>
      </include>
    </context>

    <context id="nimrod">
      <include>
        <context ref="def:shebang"/>
        <context ref="def:shell-like-comment"/>

        <context ref="multiline-double-quoted-string"/>
        <context ref="double-quoted-string"/>
        <context ref="single-quoted-string"/>

        <context ref="double-quoted-raw-string"/>

        <context id="string-conversion" style-ref="string-conversion" end-at-line-end="true">
          <start>`</start>
          <end>`</end>
          <include>
            <context ref="nimrod"/>
          </include>
        </context>

        <define-regex id="float" extended="true">
          ( (\d+)?\.\d+ | \d+\. ) |
          ( (\d+|(\d+)?\.\d+|\d+\.)[eE][+-]?\d+ )
        </define-regex>
        
        <define-regex id="numbersuffix" extended="true">
          (\'[Ff]32|\'[Ff]64|\'[Ii]8|\'[Ii]16|\'[Ii]32|\'[Ii]64)
        </define-regex>

        <context id="float" style-ref="floating-point">
          <match>(?&lt;![\w\.])\%{float}(?![\w\.])(\%{numbersuffix})?</match>
        </context>

        <context id="decimal" style-ref="decimal">
          <match>(?&lt;![\w\.])([0-9][0-9]*)[lL]?(?![\w\.])(\%{numbersuffix})?</match>
        </context>

        <context id="octal" style-ref="base-n-integer">
          <match>(?&lt;![\w\.])0[oc][0-7]+(?![\w\.])(\%{numbersuffix})?</match>
        </context>

        <context id="hex" style-ref="base-n-integer">
          <match>(?&lt;![\w\.])0[xX][0-9A-Fa-f]+(?![\w\.])(\%{numbersuffix})?</match>
        </context>

        <context id="boolean" style-ref="boolean">
          <keyword>(f|F)_*(a|A)_*(l|L)_*(s|S)_*(e|E)_*</keyword>
          <keyword>(t|T)_*(r|R)_*(u|U)_*(e|E)_*</keyword>
        </context>

        <context id="pragma" style-ref="pragma">
          <match>\{\..*\.\}</match>
        </context>

        <context id="types" style-ref="type">
            <keyword>(i|I)_*(n|N)_*(t|T)_*</keyword>
            <keyword>(i|I)_*(n|N)_*(t|T)_*(8|8)_*</keyword>
            <keyword>(i|I)_*(n|N)_*(t|T)_*(1|1)_*(6|6)_*</keyword>
            <keyword>(i|I)_*(n|N)_*(t|T)_*(3|3)_*(2|2)_*</keyword>
            <keyword>(i|I)_*(n|N)_*(t|T)_*(6|6)_*(4|4)_*</keyword>
            <keyword>(f|F)_*(l|L)_*(o|O)_*(a|A)_*(t|T)_*</keyword>
            <keyword>(f|F)_*(l|L)_*(o|O)_*(a|A)_*(t|T)_*(3|3)_*(2|2)_*</keyword>
            <keyword>(f|F)_*(l|L)_*(o|O)_*(a|A)_*(t|T)_*(6|6)_*(4|4)_*</keyword>
            <keyword>(b|B)_*(o|O)_*(o|O)_*(l|L)_*</keyword>
            <keyword>(c|C)_*(h|H)_*(a|A)_*(r|R)_*</keyword>
            <keyword>(s|S)_*(t|T)_*(r|R)_*(i|I)_*(n|N)_*(g|G)_*</keyword>
            <keyword>(c|C)_*(s|S)_*(t|T)_*(r|R)_*(i|I)_*(n|N)_*(g|G)_*</keyword>
            <keyword>(p|P)_*(o|O)_*(i|I)_*(n|N)_*(t|T)_*(e|E)_*(r|R)_*</keyword>
            <keyword>(o|O)_*(r|R)_*(d|D)_*(i|I)_*(n|N)_*(a|A)_*(l|L)_*</keyword>
            <keyword>(e|E)_*(x|X)_*(p|P)_*(r|R)_*</keyword>
            <keyword>(s|S)_*(t|T)_*(m|M)_*(t|T)_*</keyword>
            <keyword>(t|T)_*(y|Y)_*(p|P)_*(e|E)_*(d|D)_*(e|E)_*(s|S)_*(c|C)_*</keyword>
            <keyword>(r|R)_*(a|A)_*(n|N)_*(g|G)_*(e|E)_*</keyword>
            <!-- <keyword>(a|A)_*(r|R)_*(r|R)_*(a|A)_*(y|Y)_*</keyword>--> <!-- looks strange -->
            <keyword>(o|O)_*(p|P)_*(e|E)_*(n|N)_*(a|A)_*(r|R)_*(r|R)_*(a|A)_*(y|Y)_*</keyword>
            <!--<keyword>(s|S)_*(e|E)_*(q|Q)_*</keyword>--> <!-- looks strange too -->
            <keyword>(b|B)_*(y|Y)_*(t|T)_*(e|E)_*</keyword>
            <keyword>(n|N)_*(a|A)_*(t|T)_*(u|U)_*(r|R)_*(a|A)_*(l|L)_*</keyword>
            <keyword>(p|P)_*(o|O)_*(s|S)_*(i|I)_*(t|T)_*(i|I)_*(v|V)_*(e|E)_*</keyword>

        </context>

        <context id="keyword" style-ref="keyword">
          <keyword>(a|A)_*(d|D)_*(d|D)_*(r|R)_*</keyword>
          <keyword>(a|A)_*(n|N)_*(d|D)_*</keyword>
          <keyword>(a|A)_*(s|S)_*</keyword>
          <keyword>(a|A)_*(s|S)_*(m|M)_*</keyword>
          <keyword>(b|B)_*(i|I)_*(n|N)_*(d|D)_*</keyword>
          <keyword>(b|B)_*(l|L)_*(o|O)_*(c|C)_*(k|K)_*</keyword>
          <keyword>(b|B)_*(r|R)_*(e|E)_*(a|A)_*(k|K)_*</keyword>
          <keyword>(c|C)_*(a|A)_*(s|S)_*(e|E)_*</keyword>
          <keyword>(c|C)_*(a|A)_*(s|S)_*(t|T)_*</keyword>
          <keyword>(c|C)_*(o|O)_*(n|N)_*(s|S)_*(t|T)_*</keyword>
          <keyword>(c|C)_*(o|O)_*(n|N)_*(t|T)_*(i|I)_*(n|N)_*(u|U)_*(e|E)_*</keyword>
          <keyword>(c|C)_*(o|O)_*(n|N)_*(v|V)_*(e|E)_*(r|R)_*(t|T)_*(e|E)_*(r|R)_*</keyword>
          <keyword>(d|D)_*(i|I)_*(s|S)_*(c|C)_*(a|A)_*(r|R)_*(d|D)_*</keyword>
          <keyword>(d|D)_*(i|I)_*(s|S)_*(t|T)_*(i|I)_*(n|N)_*(c|C)_*(t|T)_*</keyword>
          <keyword>(d|D)_*(i|I)_*(v|V)_*</keyword>
          <keyword>(e|E)_*(l|L)_*(i|I)_*(f|F)_*</keyword>
          <keyword>(e|E)_*(l|L)_*(s|S)_*(e|E)_*</keyword>
          <keyword>(e|E)_*(n|N)_*(d|D)_*</keyword>
          <keyword>(e|E)_*(n|N)_*(u|U)_*(m|M)_*</keyword>
          <keyword>(e|E)_*(x|X)_*(c|C)_*(e|E)_*(p|P)_*(t|T)_*</keyword>
          <keyword>(f|F)_*(i|I)_*(n|N)_*(a|A)_*(l|L)_*(l|L)_*(y|Y)_*</keyword>
          <keyword>(f|F)_*(o|O)_*(r|R)_*</keyword>
          <keyword>(f|F)_*(r|R)_*(o|O)_*(m|M)_*</keyword>
          <keyword>(g|G)_*(e|E)_*(n|N)_*(e|E)_*(r|R)_*(i|I)_*(c|C)_*</keyword>
          <keyword>(i|I)_*(f|F)_*</keyword>
          <keyword>(i|I)_*(m|M)_*(p|P)_*(l|L)_*(i|I)_*(e|E)_*(s|S)_*</keyword>
          <keyword>(i|I)_*(m|M)_*(p|P)_*(o|O)_*(r|R)_*(t|T)_*</keyword>
          <keyword>(i|I)_*(n|N)_*</keyword>
          <keyword>(i|I)_*(n|N)_*(c|C)_*(l|L)_*(u|U)_*(d|D)_*(e|E)_*</keyword>
          <keyword>(i|I)_*(s|S)_*</keyword>
          <keyword>(i|I)_*(s|S)_*(n|N)_*(o|O)_*(t|T)_*</keyword>
          <keyword>(i|I)_*(t|T)_*(e|E)_*(r|R)_*(a|A)_*(t|T)_*(o|O)_*(r|R)_*</keyword>
          <keyword>(l|L)_*(a|A)_*(m|M)_*(b|B)_*(d|D)_*(a|A)_*</keyword>
          <keyword>(l|L)_*(e|E)_*(t|T)_*</keyword>
          <keyword>(m|M)_*(a|A)_*(c|C)_*(r|R)_*(o|O)_*</keyword>
          <keyword>(m|M)_*(e|E)_*(t|T)_*(h|H)_*(o|O)_*(d|D)_*</keyword>
          <keyword>(m|M)_*(o|O)_*(d|D)_*</keyword>
          <keyword>(n|N)_*(i|I)_*(l|L)_*</keyword>
          <keyword>(n|N)_*(o|O)_*(t|T)_*</keyword>
          <keyword>(n|N)_*(o|O)_*(t|T)_*(i|I)_*(n|N)_*</keyword>
          <keyword>(o|O)_*(b|B)_*(j|J)_*(e|E)_*(c|C)_*(t|T)_*</keyword>
          <keyword>(o|O)_*(f|F)_*</keyword>
          <keyword>(o|O)_*(r|R)_*</keyword>
          <keyword>(o|O)_*(u|U)_*(t|T)_*</keyword>
          <keyword>(p|P)_*(r|R)_*(o|O)_*(c|C)_*</keyword>
          <keyword>(p|P)_*(t|T)_*(r|R)_*</keyword>
          <keyword>(r|R)_*(a|A)_*(i|I)_*(s|S)_*(e|E)_*</keyword>
          <keyword>(r|R)_*(e|E)_*(f|F)_*</keyword>
          <keyword>(r|R)_*(e|E)_*(t|T)_*(u|U)_*(r|R)_*(n|N)_*</keyword>
          <keyword>(s|S)_*(h|H)_*(l|L)_*</keyword>
          <keyword>(s|S)_*(h|H)_*(r|R)_*</keyword>
          <keyword>(t|T)_*(e|E)_*(m|M)_*(p|P)_*(l|L)_*(a|A)_*(t|T)_*(e|E)_*</keyword>
          <keyword>(t|T)_*(r|R)_*(y|Y)_*</keyword>
          <keyword>(t|T)_*(u|U)_*(p|P)_*(l|L)_*(e|E)_*</keyword>
          <keyword>(t|T)_*(y|Y)_*(p|P)_*(e|E)_*</keyword>
          <keyword>(v|V)_*(a|A)_*(r|R)_*</keyword>
          <keyword>(w|W)_*(h|H)_*(e|E)_*(n|N)_*</keyword>
          <keyword>(w|W)_*(h|H)_*(e|E)_*(r|R)_*(e|E)_*</keyword>
          <keyword>(w|W)_*(h|H)_*(i|I)_*(l|L)_*(e|E)_*</keyword>
          <keyword>(w|W)_*(i|I)_*(t|T)_*(h|H)_*</keyword>
          <keyword>(w|W)_*(i|I)_*(t|T)_*(h|H)_*(o|O)_*(u|U)_*(t|T)_*</keyword>
          <keyword>(x|X)_*(o|O)_*(r|R)_*</keyword>
          <keyword>(y|Y)_*(i|I)_*(e|E)_*(l|L)_*(d|D)_*</keyword>
        </context>
      </include>
    </context>
  </definitions>
</language>
